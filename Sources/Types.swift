// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// PlaidLinkTokenCreate
    ///
    /// - Remark: HTTP `GET /plaid/link/token/create`.
    /// - Remark: Generated from `#/paths//plaid/link/token/create/get(get-plaid-link-token-create)`.
    func getPlaidLinkTokenCreate(_ input: Operations.GetPlaidLinkTokenCreate.Input) async throws -> Operations.GetPlaidLinkTokenCreate.Output
    /// PlaidLinkTokenUpdate
    ///
    /// - Remark: HTTP `GET /plaid/link/token/update`.
    /// - Remark: Generated from `#/paths//plaid/link/token/update/get(get-plaid-link-token-update)`.
    func getPlaidLinkTokenUpdate(_ input: Operations.GetPlaidLinkTokenUpdate.Input) async throws -> Operations.GetPlaidLinkTokenUpdate.Output
    /// AccountsGet
    ///
    /// Get accounts from server
    ///
    /// - Remark: HTTP `GET /accounts`.
    /// - Remark: Generated from `#/paths//accounts/get(get-accounts)`.
    func getAccounts(_ input: Operations.GetAccounts.Input) async throws -> Operations.GetAccounts.Output
    /// AccountsPost
    ///
    /// Post new account to server
    ///
    /// - Remark: HTTP `POST /accounts`.
    /// - Remark: Generated from `#/paths//accounts/post(post-accounts)`.
    func postAccounts(_ input: Operations.PostAccounts.Input) async throws -> Operations.PostAccounts.Output
    /// AccountsPut
    ///
    /// Update existing account on server
    ///
    /// - Remark: HTTP `PUT /accounts`.
    /// - Remark: Generated from `#/paths//accounts/put(put-accounts)`.
    func putAccounts(_ input: Operations.PutAccounts.Input) async throws -> Operations.PutAccounts.Output
    /// AccountsDelete
    ///
    /// Delete account from server
    ///
    /// - Remark: HTTP `DELETE /accounts`.
    /// - Remark: Generated from `#/paths//accounts/delete(delete-accounts)`.
    func deleteAccounts(_ input: Operations.DeleteAccounts.Input) async throws -> Operations.DeleteAccounts.Output
    /// TransactionsGet
    ///
    /// - Remark: HTTP `GET /transactions`.
    /// - Remark: Generated from `#/paths//transactions/get(get-transactions)`.
    func getTransactions(_ input: Operations.GetTransactions.Input) async throws -> Operations.GetTransactions.Output
    /// TransactionsPost
    ///
    /// - Remark: HTTP `POST /transactions`.
    /// - Remark: Generated from `#/paths//transactions/post(post-transactions)`.
    func postTransactions(_ input: Operations.PostTransactions.Input) async throws -> Operations.PostTransactions.Output
    /// TransactionsPut
    ///
    /// - Remark: HTTP `PUT /transactions`.
    /// - Remark: Generated from `#/paths//transactions/put(put-transactions)`.
    func putTransactions(_ input: Operations.PutTransactions.Input) async throws -> Operations.PutTransactions.Output
    /// TransactionsDelete
    ///
    /// - Remark: HTTP `DELETE /transactions`.
    /// - Remark: Generated from `#/paths//transactions/delete(delete-transactions)`.
    func deleteTransactions(_ input: Operations.DeleteTransactions.Input) async throws -> Operations.DeleteTransactions.Output
    /// TransactionsSync
    ///
    /// - Remark: HTTP `GET /transactions/sync`.
    /// - Remark: Generated from `#/paths//transactions/sync/get(get-transactions-sync)`.
    func getTransactionsSync(_ input: Operations.GetTransactionsSync.Input) async throws -> Operations.GetTransactionsSync.Output
    /// LiabilitiesGet
    ///
    /// - Remark: HTTP `GET /liabilities`.
    /// - Remark: Generated from `#/paths//liabilities/get(get-liabilities)`.
    func getLiabilities(_ input: Operations.GetLiabilities.Input) async throws -> Operations.GetLiabilities.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// PlaidLinkTokenCreate
    ///
    /// - Remark: HTTP `GET /plaid/link/token/create`.
    /// - Remark: Generated from `#/paths//plaid/link/token/create/get(get-plaid-link-token-create)`.
    internal func getPlaidLinkTokenCreate(headers: Operations.GetPlaidLinkTokenCreate.Input.Headers = .init()) async throws -> Operations.GetPlaidLinkTokenCreate.Output {
        try await getPlaidLinkTokenCreate(Operations.GetPlaidLinkTokenCreate.Input(headers: headers))
    }
    /// PlaidLinkTokenUpdate
    ///
    /// - Remark: HTTP `GET /plaid/link/token/update`.
    /// - Remark: Generated from `#/paths//plaid/link/token/update/get(get-plaid-link-token-update)`.
    internal func getPlaidLinkTokenUpdate(headers: Operations.GetPlaidLinkTokenUpdate.Input.Headers = .init()) async throws -> Operations.GetPlaidLinkTokenUpdate.Output {
        try await getPlaidLinkTokenUpdate(Operations.GetPlaidLinkTokenUpdate.Input(headers: headers))
    }
    /// AccountsGet
    ///
    /// Get accounts from server
    ///
    /// - Remark: HTTP `GET /accounts`.
    /// - Remark: Generated from `#/paths//accounts/get(get-accounts)`.
    internal func getAccounts(
        query: Operations.GetAccounts.Input.Query = .init(),
        headers: Operations.GetAccounts.Input.Headers = .init()
    ) async throws -> Operations.GetAccounts.Output {
        try await getAccounts(Operations.GetAccounts.Input(
            query: query,
            headers: headers
        ))
    }
    /// AccountsPost
    ///
    /// Post new account to server
    ///
    /// - Remark: HTTP `POST /accounts`.
    /// - Remark: Generated from `#/paths//accounts/post(post-accounts)`.
    internal func postAccounts(body: Operations.PostAccounts.Input.Body? = nil) async throws -> Operations.PostAccounts.Output {
        try await postAccounts(Operations.PostAccounts.Input(body: body))
    }
    /// AccountsPut
    ///
    /// Update existing account on server
    ///
    /// - Remark: HTTP `PUT /accounts`.
    /// - Remark: Generated from `#/paths//accounts/put(put-accounts)`.
    internal func putAccounts(body: Operations.PutAccounts.Input.Body? = nil) async throws -> Operations.PutAccounts.Output {
        try await putAccounts(Operations.PutAccounts.Input(body: body))
    }
    /// AccountsDelete
    ///
    /// Delete account from server
    ///
    /// - Remark: HTTP `DELETE /accounts`.
    /// - Remark: Generated from `#/paths//accounts/delete(delete-accounts)`.
    internal func deleteAccounts(query: Operations.DeleteAccounts.Input.Query) async throws -> Operations.DeleteAccounts.Output {
        try await deleteAccounts(Operations.DeleteAccounts.Input(query: query))
    }
    /// TransactionsGet
    ///
    /// - Remark: HTTP `GET /transactions`.
    /// - Remark: Generated from `#/paths//transactions/get(get-transactions)`.
    internal func getTransactions(
        query: Operations.GetTransactions.Input.Query = .init(),
        headers: Operations.GetTransactions.Input.Headers = .init()
    ) async throws -> Operations.GetTransactions.Output {
        try await getTransactions(Operations.GetTransactions.Input(
            query: query,
            headers: headers
        ))
    }
    /// TransactionsPost
    ///
    /// - Remark: HTTP `POST /transactions`.
    /// - Remark: Generated from `#/paths//transactions/post(post-transactions)`.
    internal func postTransactions(body: Operations.PostTransactions.Input.Body? = nil) async throws -> Operations.PostTransactions.Output {
        try await postTransactions(Operations.PostTransactions.Input(body: body))
    }
    /// TransactionsPut
    ///
    /// - Remark: HTTP `PUT /transactions`.
    /// - Remark: Generated from `#/paths//transactions/put(put-transactions)`.
    internal func putTransactions(
        query: Operations.PutTransactions.Input.Query = .init(),
        body: Operations.PutTransactions.Input.Body? = nil
    ) async throws -> Operations.PutTransactions.Output {
        try await putTransactions(Operations.PutTransactions.Input(
            query: query,
            body: body
        ))
    }
    /// TransactionsDelete
    ///
    /// - Remark: HTTP `DELETE /transactions`.
    /// - Remark: Generated from `#/paths//transactions/delete(delete-transactions)`.
    internal func deleteTransactions(query: Operations.DeleteTransactions.Input.Query = .init()) async throws -> Operations.DeleteTransactions.Output {
        try await deleteTransactions(Operations.DeleteTransactions.Input(query: query))
    }
    /// TransactionsSync
    ///
    /// - Remark: HTTP `GET /transactions/sync`.
    /// - Remark: Generated from `#/paths//transactions/sync/get(get-transactions-sync)`.
    internal func getTransactionsSync(
        query: Operations.GetTransactionsSync.Input.Query = .init(),
        headers: Operations.GetTransactionsSync.Input.Headers = .init()
    ) async throws -> Operations.GetTransactionsSync.Output {
        try await getTransactionsSync(Operations.GetTransactionsSync.Input(
            query: query,
            headers: headers
        ))
    }
    /// LiabilitiesGet
    ///
    /// - Remark: HTTP `GET /liabilities`.
    /// - Remark: Generated from `#/paths//liabilities/get(get-liabilities)`.
    internal func getLiabilities(
        query: Operations.GetLiabilities.Input.Query = .init(),
        headers: Operations.GetLiabilities.Input.Headers = .init()
    ) async throws -> Operations.GetLiabilities.Output {
        try await getLiabilities(Operations.GetLiabilities.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    /// ZeroBound Production Server
    internal enum Server1 {
        /// ZeroBound Production Server
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.zerobound.online",
                variables: []
            )
        }
    }
    /// ZeroBound Production Server
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.zerobound.online",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// Basic Description of a PlaidLinkToken
        ///
        /// - Remark: Generated from `#/components/schemas/PlaidLinkToken`.
        internal struct PlaidLinkToken: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlaidLinkToken/link_token`.
            internal var linkToken: Swift.String
            /// - Remark: Generated from `#/components/schemas/PlaidLinkToken/expiration`.
            internal var expiration: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/PlaidLinkToken/request_id`.
            internal var requestId: Swift.String
            /// Creates a new `PlaidLinkToken`.
            ///
            /// - Parameters:
            ///   - linkToken:
            ///   - expiration:
            ///   - requestId:
            internal init(
                linkToken: Swift.String,
                expiration: Foundation.Date,
                requestId: Swift.String
            ) {
                self.linkToken = linkToken
                self.expiration = expiration
                self.requestId = requestId
            }
            internal enum CodingKeys: String, CodingKey {
                case linkToken = "link_token"
                case expiration
                case requestId = "request_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Transaction`.
        internal struct Transaction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Transaction/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/account_id`.
            internal var accountId: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/amount`.
            internal var amount: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Transaction/iso_currency_code`.
            internal var isoCurrencyCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/unofficial_currency_code`.
            internal var unofficialCurrencyCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/check_number`.
            internal var checkNumber: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/date`.
            internal var date: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/location`.
            internal var location: Components.Schemas.Location?
            /// - Remark: Generated from `#/components/schemas/Transaction/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/merchant_name`.
            internal var merchantName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/original_description`.
            internal var originalDescription: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/payment_meta`.
            internal var paymentMeta: Components.Schemas.PaymentMeta
            /// - Remark: Generated from `#/components/schemas/Transaction/pending`.
            internal var pending: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Transaction/pending_transaction_id`.
            internal var pendingTransactionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/account_owner`.
            internal var accountOwner: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/transaction_id`.
            internal var transactionId: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/transaction_type`.
            internal var transactionType: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/logo_url`.
            internal var logoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/website`.
            internal var website: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/authorized_date`.
            internal var authorizedDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/authorized_datetime`.
            internal var authorizedDatetime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Transaction/datetime`.
            internal var datetime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Transaction/payment_channel`.
            internal var paymentChannel: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/personal_finance_category`.
            internal var personalFinanceCategory: Components.Schemas.PersonalFinanceCategory?
            /// - Remark: Generated from `#/components/schemas/Transaction/transaction_code`.
            internal var transactionCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/personal_finance_category_icon_url`.
            internal var personalFinanceCategoryIconUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/counterparties`.
            internal var counterparties: [Components.Schemas.Counterparties]?
            /// - Remark: Generated from `#/components/schemas/Transaction/merchant_entity_id`.
            internal var merchantEntityId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/created_at`.
            internal var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/updated_at`.
            internal var updatedAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/database_account_id`.
            internal var databaseAccountId: Swift.String
            /// Creates a new `Transaction`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - accountId:
            ///   - amount:
            ///   - isoCurrencyCode:
            ///   - unofficialCurrencyCode:
            ///   - checkNumber:
            ///   - date:
            ///   - location:
            ///   - name:
            ///   - merchantName:
            ///   - originalDescription:
            ///   - paymentMeta:
            ///   - pending:
            ///   - pendingTransactionId:
            ///   - accountOwner:
            ///   - transactionId:
            ///   - transactionType:
            ///   - logoUrl:
            ///   - website:
            ///   - authorizedDate:
            ///   - authorizedDatetime:
            ///   - datetime:
            ///   - paymentChannel:
            ///   - personalFinanceCategory:
            ///   - transactionCode:
            ///   - personalFinanceCategoryIconUrl:
            ///   - counterparties:
            ///   - merchantEntityId:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - databaseAccountId:
            internal init(
                id: Swift.String,
                accountId: Swift.String,
                amount: Swift.Double,
                isoCurrencyCode: Swift.String? = nil,
                unofficialCurrencyCode: Swift.String? = nil,
                checkNumber: Swift.String? = nil,
                date: Swift.String,
                location: Components.Schemas.Location? = nil,
                name: Swift.String,
                merchantName: Swift.String? = nil,
                originalDescription: Swift.String? = nil,
                paymentMeta: Components.Schemas.PaymentMeta,
                pending: Swift.Bool? = nil,
                pendingTransactionId: Swift.String? = nil,
                accountOwner: Swift.String? = nil,
                transactionId: Swift.String,
                transactionType: Swift.String,
                logoUrl: Swift.String? = nil,
                website: Swift.String? = nil,
                authorizedDate: Swift.String? = nil,
                authorizedDatetime: Foundation.Date? = nil,
                datetime: Foundation.Date? = nil,
                paymentChannel: Swift.String,
                personalFinanceCategory: Components.Schemas.PersonalFinanceCategory? = nil,
                transactionCode: Swift.String? = nil,
                personalFinanceCategoryIconUrl: Swift.String,
                counterparties: [Components.Schemas.Counterparties]? = nil,
                merchantEntityId: Swift.String? = nil,
                createdAt: Swift.String,
                updatedAt: Swift.String,
                databaseAccountId: Swift.String
            ) {
                self.id = id
                self.accountId = accountId
                self.amount = amount
                self.isoCurrencyCode = isoCurrencyCode
                self.unofficialCurrencyCode = unofficialCurrencyCode
                self.checkNumber = checkNumber
                self.date = date
                self.location = location
                self.name = name
                self.merchantName = merchantName
                self.originalDescription = originalDescription
                self.paymentMeta = paymentMeta
                self.pending = pending
                self.pendingTransactionId = pendingTransactionId
                self.accountOwner = accountOwner
                self.transactionId = transactionId
                self.transactionType = transactionType
                self.logoUrl = logoUrl
                self.website = website
                self.authorizedDate = authorizedDate
                self.authorizedDatetime = authorizedDatetime
                self.datetime = datetime
                self.paymentChannel = paymentChannel
                self.personalFinanceCategory = personalFinanceCategory
                self.transactionCode = transactionCode
                self.personalFinanceCategoryIconUrl = personalFinanceCategoryIconUrl
                self.counterparties = counterparties
                self.merchantEntityId = merchantEntityId
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.databaseAccountId = databaseAccountId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case accountId = "account_id"
                case amount
                case isoCurrencyCode = "iso_currency_code"
                case unofficialCurrencyCode = "unofficial_currency_code"
                case checkNumber = "check_number"
                case date
                case location
                case name
                case merchantName = "merchant_name"
                case originalDescription = "original_description"
                case paymentMeta = "payment_meta"
                case pending
                case pendingTransactionId = "pending_transaction_id"
                case accountOwner = "account_owner"
                case transactionId = "transaction_id"
                case transactionType = "transaction_type"
                case logoUrl = "logo_url"
                case website
                case authorizedDate = "authorized_date"
                case authorizedDatetime = "authorized_datetime"
                case datetime
                case paymentChannel = "payment_channel"
                case personalFinanceCategory = "personal_finance_category"
                case transactionCode = "transaction_code"
                case personalFinanceCategoryIconUrl = "personal_finance_category_icon_url"
                case counterparties
                case merchantEntityId = "merchant_entity_id"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case databaseAccountId = "database_account_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Account`.
        internal struct Account: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Account/id`.
            internal var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Account/account_id`.
            internal var accountId: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/balances`.
            internal var balances: Components.Schemas.Balances
            /// - Remark: Generated from `#/components/schemas/Account/mask`.
            internal var mask: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/official_name`.
            internal var officialName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Account/type`.
            internal var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/subtype`.
            internal var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Account/verification_status`.
            internal var verificationStatus: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/verification_name`.
            internal var verificationName: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/verification_insights`.
            internal var verificationInsights: Components.Schemas.VerificationInsights
            /// - Remark: Generated from `#/components/schemas/Account/persistent_account_id`.
            internal var persistentAccountId: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/holder_category`.
            internal var holderCategory: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Account/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Account/updated_at`.
            internal var updatedAt: Foundation.Date
            /// Creates a new `Account`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - accountId:
            ///   - balances:
            ///   - mask:
            ///   - name:
            ///   - officialName:
            ///   - _type:
            ///   - subtype:
            ///   - verificationStatus:
            ///   - verificationName:
            ///   - verificationInsights:
            ///   - persistentAccountId:
            ///   - holderCategory:
            ///   - createdAt:
            ///   - updatedAt:
            internal init(
                id: Swift.String? = nil,
                accountId: Swift.String,
                balances: Components.Schemas.Balances,
                mask: Swift.String,
                name: Swift.String,
                officialName: Swift.String? = nil,
                _type: Swift.String,
                subtype: Swift.String? = nil,
                verificationStatus: Swift.String,
                verificationName: Swift.String,
                verificationInsights: Components.Schemas.VerificationInsights,
                persistentAccountId: Swift.String,
                holderCategory: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date
            ) {
                self.id = id
                self.accountId = accountId
                self.balances = balances
                self.mask = mask
                self.name = name
                self.officialName = officialName
                self._type = _type
                self.subtype = subtype
                self.verificationStatus = verificationStatus
                self.verificationName = verificationName
                self.verificationInsights = verificationInsights
                self.persistentAccountId = persistentAccountId
                self.holderCategory = holderCategory
                self.createdAt = createdAt
                self.updatedAt = updatedAt
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case accountId = "account_id"
                case balances
                case mask
                case name
                case officialName = "official_name"
                case _type = "type"
                case subtype
                case verificationStatus = "verification_status"
                case verificationName = "verification_name"
                case verificationInsights = "verification_insights"
                case persistentAccountId = "persistent_account_id"
                case holderCategory = "holder_category"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Balances`.
        internal struct Balances: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Balances/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Balances/available`.
            internal var available: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Balances/current`.
            internal var current: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Balances/limit`.
            internal var limit: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Balances/iso_currency_code`.
            internal var isoCurrencyCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Balances/unofficial_currency_code`.
            internal var unofficialCurrencyCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Balances/last_updated_datetime`.
            internal var lastUpdatedDatetime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Balances/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Balances/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Balances/account_id`.
            internal var accountId: Swift.String
            /// Creates a new `Balances`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - available:
            ///   - current:
            ///   - limit:
            ///   - isoCurrencyCode:
            ///   - unofficialCurrencyCode:
            ///   - lastUpdatedDatetime:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - accountId:
            internal init(
                id: Swift.String,
                available: Swift.Double? = nil,
                current: Swift.Double? = nil,
                limit: Swift.Double? = nil,
                isoCurrencyCode: Swift.String? = nil,
                unofficialCurrencyCode: Swift.String? = nil,
                lastUpdatedDatetime: Foundation.Date? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                accountId: Swift.String
            ) {
                self.id = id
                self.available = available
                self.current = current
                self.limit = limit
                self.isoCurrencyCode = isoCurrencyCode
                self.unofficialCurrencyCode = unofficialCurrencyCode
                self.lastUpdatedDatetime = lastUpdatedDatetime
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.accountId = accountId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case available
                case current
                case limit
                case isoCurrencyCode = "iso_currency_code"
                case unofficialCurrencyCode = "unofficial_currency_code"
                case lastUpdatedDatetime = "last_updated_datetime"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case accountId = "account_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/VerificationInsights`.
        internal struct VerificationInsights: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VerificationInsights/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/VerificationInsights/name_match_score`.
            internal var nameMatchScore: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/VerificationInsights/network_status`.
            internal var networkStatus: Components.Schemas.NetworkStatus
            /// - Remark: Generated from `#/components/schemas/VerificationInsights/previous_returns`.
            internal var previousReturns: Components.Schemas.PreviousReturns
            /// - Remark: Generated from `#/components/schemas/VerificationInsights/account_number_format`.
            internal var accountNumberFormat: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VerificationInsights/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/VerificationInsights/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/VerificationInsights/account_id`.
            internal var accountId: Swift.String
            /// Creates a new `VerificationInsights`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nameMatchScore:
            ///   - networkStatus:
            ///   - previousReturns:
            ///   - accountNumberFormat:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - accountId:
            internal init(
                id: Swift.String,
                nameMatchScore: Swift.Int? = nil,
                networkStatus: Components.Schemas.NetworkStatus,
                previousReturns: Components.Schemas.PreviousReturns,
                accountNumberFormat: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                accountId: Swift.String
            ) {
                self.id = id
                self.nameMatchScore = nameMatchScore
                self.networkStatus = networkStatus
                self.previousReturns = previousReturns
                self.accountNumberFormat = accountNumberFormat
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.accountId = accountId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case nameMatchScore = "name_match_score"
                case networkStatus = "network_status"
                case previousReturns = "previous_returns"
                case accountNumberFormat = "account_number_format"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case accountId = "account_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/NetworkStatus`.
        internal struct NetworkStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetworkStatus/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/NetworkStatus/has_numbers_match`.
            internal var hasNumbersMatch: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/NetworkStatus/is_numbers_match_verified`.
            internal var isNumbersMatchVerified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/NetworkStatus/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/NetworkStatus/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/NetworkStatus/account_id`.
            internal var accountId: Swift.String
            /// Creates a new `NetworkStatus`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - hasNumbersMatch:
            ///   - isNumbersMatchVerified:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - accountId:
            internal init(
                id: Swift.String,
                hasNumbersMatch: Swift.Bool,
                isNumbersMatchVerified: Swift.Bool,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                accountId: Swift.String
            ) {
                self.id = id
                self.hasNumbersMatch = hasNumbersMatch
                self.isNumbersMatchVerified = isNumbersMatchVerified
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.accountId = accountId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case hasNumbersMatch = "has_numbers_match"
                case isNumbersMatchVerified = "is_numbers_match_verified"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case accountId = "account_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/PreviousReturns`.
        internal struct PreviousReturns: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PreviousReturns/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PreviousReturns/has_previous_administrative_return`.
            internal var hasPreviousAdministrativeReturn: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/PreviousReturns/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/PreviousReturns/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/PreviousReturns/account_id`.
            internal var accountId: Swift.String
            /// Creates a new `PreviousReturns`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - hasPreviousAdministrativeReturn:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - accountId:
            internal init(
                id: Swift.String,
                hasPreviousAdministrativeReturn: Swift.Bool,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                accountId: Swift.String
            ) {
                self.id = id
                self.hasPreviousAdministrativeReturn = hasPreviousAdministrativeReturn
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.accountId = accountId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case hasPreviousAdministrativeReturn = "has_previous_administrative_return"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case accountId = "account_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Location`.
        internal struct Location: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Location/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Location/address`.
            internal var address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Location/city`.
            internal var city: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Location/region`.
            internal var region: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Location/postal_code`.
            internal var postalCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Location/country`.
            internal var country: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Location/lat`.
            internal var lat: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Location/lon`.
            internal var lon: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Location/store_number`.
            internal var storeNumber: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Location/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Location/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Location/transaction_id`.
            internal var transactionId: Swift.String
            /// Creates a new `Location`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - address:
            ///   - city:
            ///   - region:
            ///   - postalCode:
            ///   - country:
            ///   - lat:
            ///   - lon:
            ///   - storeNumber:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - transactionId:
            internal init(
                id: Swift.String,
                address: Swift.String? = nil,
                city: Swift.String? = nil,
                region: Swift.String? = nil,
                postalCode: Swift.String? = nil,
                country: Swift.String? = nil,
                lat: Swift.String? = nil,
                lon: Swift.String? = nil,
                storeNumber: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                transactionId: Swift.String
            ) {
                self.id = id
                self.address = address
                self.city = city
                self.region = region
                self.postalCode = postalCode
                self.country = country
                self.lat = lat
                self.lon = lon
                self.storeNumber = storeNumber
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.transactionId = transactionId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case address
                case city
                case region
                case postalCode = "postal_code"
                case country
                case lat
                case lon
                case storeNumber = "store_number"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case transactionId = "transaction_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMeta`.
        internal struct PaymentMeta: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/reference_number`.
            internal var referenceNumber: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/ppd_id`.
            internal var ppdId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/payee`.
            internal var payee: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/by_order_of`.
            internal var byOrderOf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/payment_method`.
            internal var paymentMethod: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/payer`.
            internal var payer: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/payment_processor`.
            internal var paymentProcessor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/reason`.
            internal var reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/PaymentMeta/transaction_id`.
            internal var transactionId: Swift.String
            /// Creates a new `PaymentMeta`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - referenceNumber:
            ///   - ppdId:
            ///   - payee:
            ///   - byOrderOf:
            ///   - paymentMethod:
            ///   - payer:
            ///   - paymentProcessor:
            ///   - reason:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - transactionId:
            internal init(
                id: Swift.String,
                referenceNumber: Swift.String? = nil,
                ppdId: Swift.String? = nil,
                payee: Swift.String? = nil,
                byOrderOf: Swift.String? = nil,
                paymentMethod: Swift.String? = nil,
                payer: Swift.String? = nil,
                paymentProcessor: Swift.String? = nil,
                reason: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                transactionId: Swift.String
            ) {
                self.id = id
                self.referenceNumber = referenceNumber
                self.ppdId = ppdId
                self.payee = payee
                self.byOrderOf = byOrderOf
                self.paymentMethod = paymentMethod
                self.payer = payer
                self.paymentProcessor = paymentProcessor
                self.reason = reason
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.transactionId = transactionId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case referenceNumber = "reference_number"
                case ppdId = "ppd_id"
                case payee
                case byOrderOf = "by_order_of"
                case paymentMethod = "payment_method"
                case payer
                case paymentProcessor = "payment_processor"
                case reason
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case transactionId = "transaction_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/PersonalFinanceCategory`.
        internal struct PersonalFinanceCategory: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PersonalFinanceCategory/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PersonalFinanceCategory/primary`.
            internal var primary: Swift.String
            /// - Remark: Generated from `#/components/schemas/PersonalFinanceCategory/detailed`.
            internal var detailed: Swift.String
            /// - Remark: Generated from `#/components/schemas/PersonalFinanceCategory/confidence_level`.
            internal var confidenceLevel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PersonalFinanceCategory/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/PersonalFinanceCategory/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/PersonalFinanceCategory/transaction_id`.
            internal var transactionId: Swift.String
            /// Creates a new `PersonalFinanceCategory`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - primary:
            ///   - detailed:
            ///   - confidenceLevel:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - transactionId:
            internal init(
                id: Swift.String,
                primary: Swift.String,
                detailed: Swift.String,
                confidenceLevel: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                transactionId: Swift.String
            ) {
                self.id = id
                self.primary = primary
                self.detailed = detailed
                self.confidenceLevel = confidenceLevel
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.transactionId = transactionId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case primary
                case detailed
                case confidenceLevel = "confidence_level"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case transactionId = "transaction_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Counterparties`.
        internal struct Counterparties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Counterparties/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Counterparties/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Counterparties/entity_id`.
            internal var entityId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Counterparties/type`.
            internal var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/Counterparties/website`.
            internal var website: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Counterparties/logo_url`.
            internal var logoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Counterparties/confidence_level`.
            internal var confidenceLevel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Counterparties/account_numbers`.
            internal var accountNumbers: Components.Schemas.AccountNumbers?
            /// - Remark: Generated from `#/components/schemas/Counterparties/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Counterparties/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Counterparties/transaction_id`.
            internal var transactionId: Swift.String
            /// Creates a new `Counterparties`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - entityId:
            ///   - _type:
            ///   - website:
            ///   - logoUrl:
            ///   - confidenceLevel:
            ///   - accountNumbers:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - transactionId:
            internal init(
                id: Swift.String,
                name: Swift.String,
                entityId: Swift.String? = nil,
                _type: Swift.String,
                website: Swift.String? = nil,
                logoUrl: Swift.String? = nil,
                confidenceLevel: Swift.String? = nil,
                accountNumbers: Components.Schemas.AccountNumbers? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                transactionId: Swift.String
            ) {
                self.id = id
                self.name = name
                self.entityId = entityId
                self._type = _type
                self.website = website
                self.logoUrl = logoUrl
                self.confidenceLevel = confidenceLevel
                self.accountNumbers = accountNumbers
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.transactionId = transactionId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case entityId = "entity_id"
                case _type = "type"
                case website
                case logoUrl = "logo_url"
                case confidenceLevel = "confidence_level"
                case accountNumbers = "account_numbers"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case transactionId = "transaction_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccountNumbers`.
        internal struct AccountNumbers: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountNumbers/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountNumbers/bacs`.
            internal var bacs: Components.Schemas.Bacs?
            /// - Remark: Generated from `#/components/schemas/AccountNumbers/international`.
            internal var international: Components.Schemas.International?
            /// - Remark: Generated from `#/components/schemas/AccountNumbers/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/AccountNumbers/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/AccountNumbers/counterparties_id`.
            internal var counterpartiesId: Swift.String
            /// Creates a new `AccountNumbers`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - bacs:
            ///   - international:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - counterpartiesId:
            internal init(
                id: Swift.String,
                bacs: Components.Schemas.Bacs? = nil,
                international: Components.Schemas.International? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                counterpartiesId: Swift.String
            ) {
                self.id = id
                self.bacs = bacs
                self.international = international
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.counterpartiesId = counterpartiesId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case bacs
                case international
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case counterpartiesId = "counterparties_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Bacs`.
        internal struct Bacs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Bacs/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Bacs/account`.
            internal var account: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bacs/sort_code`.
            internal var sortCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bacs/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Bacs/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Bacs/account_numbers_id`.
            internal var accountNumbersId: Swift.String
            /// Creates a new `Bacs`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - account:
            ///   - sortCode:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - accountNumbersId:
            internal init(
                id: Swift.String,
                account: Swift.String? = nil,
                sortCode: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                accountNumbersId: Swift.String
            ) {
                self.id = id
                self.account = account
                self.sortCode = sortCode
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.accountNumbersId = accountNumbersId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case account
                case sortCode = "sort_code"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case accountNumbersId = "account_numbers_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/International`.
        internal struct International: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/International/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/International/iban`.
            internal var iban: Swift.String?
            /// - Remark: Generated from `#/components/schemas/International/bic`.
            internal var bic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/International/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/International/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/International/account_numbers_id`.
            internal var accountNumbersId: Swift.String
            /// Creates a new `International`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - iban:
            ///   - bic:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - accountNumbersId:
            internal init(
                id: Swift.String,
                iban: Swift.String? = nil,
                bic: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                accountNumbersId: Swift.String
            ) {
                self.id = id
                self.iban = iban
                self.bic = bic
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.accountNumbersId = accountNumbersId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case iban
                case bic
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case accountNumbersId = "account_numbers_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Liability`.
        internal struct Liability: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Liability/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Liability/credit`.
            internal var credit: [Components.Schemas.Credit]?
            /// - Remark: Generated from `#/components/schemas/Liability/mortgage`.
            internal var mortgage: [Components.Schemas.Mortgage]?
            /// - Remark: Generated from `#/components/schemas/Liability/student`.
            internal var student: [Components.Schemas.Student]?
            /// Creates a new `Liability`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - credit:
            ///   - mortgage:
            ///   - student:
            internal init(
                id: Swift.String,
                credit: [Components.Schemas.Credit]? = nil,
                mortgage: [Components.Schemas.Mortgage]? = nil,
                student: [Components.Schemas.Student]? = nil
            ) {
                self.id = id
                self.credit = credit
                self.mortgage = mortgage
                self.student = student
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case credit
                case mortgage
                case student
            }
        }
        /// - Remark: Generated from `#/components/schemas/Credit`.
        internal struct Credit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Credit/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Credit/account_id`.
            internal var accountId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Credit/aprs`.
            internal var aprs: [Components.Schemas.APRs]
            /// - Remark: Generated from `#/components/schemas/Credit/is_overdue`.
            internal var isOverdue: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Credit/last_payment_amount`.
            internal var lastPaymentAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Credit/last_payment_date`.
            internal var lastPaymentDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Credit/last_statement_issue_date`.
            internal var lastStatementIssueDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Credit/last_statement_balance`.
            internal var lastStatementBalance: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Credit/minimum_payment_amount`.
            internal var minimumPaymentAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Credit/next_payment_due_date`.
            internal var nextPaymentDueDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Credit/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Credit/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Credit/laibility_id`.
            internal var laibilityId: Swift.String
            /// Creates a new `Credit`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - accountId:
            ///   - aprs:
            ///   - isOverdue:
            ///   - lastPaymentAmount:
            ///   - lastPaymentDate:
            ///   - lastStatementIssueDate:
            ///   - lastStatementBalance:
            ///   - minimumPaymentAmount:
            ///   - nextPaymentDueDate:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - laibilityId:
            internal init(
                id: Swift.String,
                accountId: Swift.String? = nil,
                aprs: [Components.Schemas.APRs],
                isOverdue: Swift.Bool? = nil,
                lastPaymentAmount: Swift.Double? = nil,
                lastPaymentDate: Swift.String? = nil,
                lastStatementIssueDate: Swift.String? = nil,
                lastStatementBalance: Swift.Double? = nil,
                minimumPaymentAmount: Swift.Double? = nil,
                nextPaymentDueDate: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                laibilityId: Swift.String
            ) {
                self.id = id
                self.accountId = accountId
                self.aprs = aprs
                self.isOverdue = isOverdue
                self.lastPaymentAmount = lastPaymentAmount
                self.lastPaymentDate = lastPaymentDate
                self.lastStatementIssueDate = lastStatementIssueDate
                self.lastStatementBalance = lastStatementBalance
                self.minimumPaymentAmount = minimumPaymentAmount
                self.nextPaymentDueDate = nextPaymentDueDate
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.laibilityId = laibilityId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case accountId = "account_id"
                case aprs
                case isOverdue = "is_overdue"
                case lastPaymentAmount = "last_payment_amount"
                case lastPaymentDate = "last_payment_date"
                case lastStatementIssueDate = "last_statement_issue_date"
                case lastStatementBalance = "last_statement_balance"
                case minimumPaymentAmount = "minimum_payment_amount"
                case nextPaymentDueDate = "next_payment_due_date"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case laibilityId = "laibility_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/APRs`.
        internal struct APRs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/APRs/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/APRs/apr_percentage`.
            internal var aprPercentage: Swift.Double
            /// - Remark: Generated from `#/components/schemas/APRs/apr_type`.
            internal var aprType: Swift.String
            /// - Remark: Generated from `#/components/schemas/APRs/balance_subject_to_apr`.
            internal var balanceSubjectToApr: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/APRs/interest_charge_amount`.
            internal var interestChargeAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/APRs/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/APRs/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/APRs/credit_id`.
            internal var creditId: Swift.String
            /// Creates a new `APRs`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - aprPercentage:
            ///   - aprType:
            ///   - balanceSubjectToApr:
            ///   - interestChargeAmount:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - creditId:
            internal init(
                id: Swift.String,
                aprPercentage: Swift.Double,
                aprType: Swift.String,
                balanceSubjectToApr: Swift.Double? = nil,
                interestChargeAmount: Swift.Double? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                creditId: Swift.String
            ) {
                self.id = id
                self.aprPercentage = aprPercentage
                self.aprType = aprType
                self.balanceSubjectToApr = balanceSubjectToApr
                self.interestChargeAmount = interestChargeAmount
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.creditId = creditId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case aprPercentage = "apr_percentage"
                case aprType = "apr_type"
                case balanceSubjectToApr = "balance_subject_to_apr"
                case interestChargeAmount = "interest_charge_amount"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case creditId = "credit_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Mortgage`.
        internal struct Mortgage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Mortgage/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Mortgage/account_id`.
            internal var accountId: Swift.String
            /// - Remark: Generated from `#/components/schemas/Mortgage/current_late_fee`.
            internal var currentLateFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Mortgage/escrow_balance`.
            internal var escrowBalance: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Mortgage/has_pmi`.
            internal var hasPmi: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Mortgage/has_prepayment_penalty`.
            internal var hasPrepaymentPenalty: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Mortgage/interest_rate`.
            internal var interestRate: Components.Schemas.InterestRate
            /// - Remark: Generated from `#/components/schemas/Mortgage/last_payment_amount`.
            internal var lastPaymentAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Mortgage/last_payment_date`.
            internal var lastPaymentDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Mortgage/loan_type_description`.
            internal var loanTypeDescription: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Mortgage/loan_term`.
            internal var loanTerm: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Mortgage/maturity_date`.
            internal var maturityDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Mortgage/next_monthly_payment`.
            internal var nextMonthlyPayment: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Mortgage/next_payment_due_date`.
            internal var nextPaymentDueDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Mortgage/origination_date`.
            internal var originationDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Mortgage/origination_principal_amount`.
            internal var originationPrincipalAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Mortgage/past_due_amount`.
            internal var pastDueAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Mortgage/property_address`.
            internal var propertyAddress: Components.Schemas.PropertyAddress
            /// - Remark: Generated from `#/components/schemas/Mortgage/ytd_interest_paid`.
            internal var ytdInterestPaid: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Mortgage/ytd_principal_paid`.
            internal var ytdPrincipalPaid: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Mortgage/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Mortgage/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Mortgage/liability_id`.
            internal var liabilityId: Swift.String
            /// Creates a new `Mortgage`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - accountId:
            ///   - currentLateFee:
            ///   - escrowBalance:
            ///   - hasPmi:
            ///   - hasPrepaymentPenalty:
            ///   - interestRate:
            ///   - lastPaymentAmount:
            ///   - lastPaymentDate:
            ///   - loanTypeDescription:
            ///   - loanTerm:
            ///   - maturityDate:
            ///   - nextMonthlyPayment:
            ///   - nextPaymentDueDate:
            ///   - originationDate:
            ///   - originationPrincipalAmount:
            ///   - pastDueAmount:
            ///   - propertyAddress:
            ///   - ytdInterestPaid:
            ///   - ytdPrincipalPaid:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - liabilityId:
            internal init(
                id: Swift.String,
                accountId: Swift.String,
                currentLateFee: Swift.Double? = nil,
                escrowBalance: Swift.Double? = nil,
                hasPmi: Swift.Bool? = nil,
                hasPrepaymentPenalty: Swift.Bool? = nil,
                interestRate: Components.Schemas.InterestRate,
                lastPaymentAmount: Swift.Double? = nil,
                lastPaymentDate: Swift.String? = nil,
                loanTypeDescription: Swift.String? = nil,
                loanTerm: Swift.String? = nil,
                maturityDate: Swift.String? = nil,
                nextMonthlyPayment: Swift.Double? = nil,
                nextPaymentDueDate: Swift.String? = nil,
                originationDate: Swift.String? = nil,
                originationPrincipalAmount: Swift.Double? = nil,
                pastDueAmount: Swift.Double? = nil,
                propertyAddress: Components.Schemas.PropertyAddress,
                ytdInterestPaid: Swift.Double? = nil,
                ytdPrincipalPaid: Swift.Double? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                liabilityId: Swift.String
            ) {
                self.id = id
                self.accountId = accountId
                self.currentLateFee = currentLateFee
                self.escrowBalance = escrowBalance
                self.hasPmi = hasPmi
                self.hasPrepaymentPenalty = hasPrepaymentPenalty
                self.interestRate = interestRate
                self.lastPaymentAmount = lastPaymentAmount
                self.lastPaymentDate = lastPaymentDate
                self.loanTypeDescription = loanTypeDescription
                self.loanTerm = loanTerm
                self.maturityDate = maturityDate
                self.nextMonthlyPayment = nextMonthlyPayment
                self.nextPaymentDueDate = nextPaymentDueDate
                self.originationDate = originationDate
                self.originationPrincipalAmount = originationPrincipalAmount
                self.pastDueAmount = pastDueAmount
                self.propertyAddress = propertyAddress
                self.ytdInterestPaid = ytdInterestPaid
                self.ytdPrincipalPaid = ytdPrincipalPaid
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.liabilityId = liabilityId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case accountId = "account_id"
                case currentLateFee = "current_late_fee"
                case escrowBalance = "escrow_balance"
                case hasPmi = "has_pmi"
                case hasPrepaymentPenalty = "has_prepayment_penalty"
                case interestRate = "interest_rate"
                case lastPaymentAmount = "last_payment_amount"
                case lastPaymentDate = "last_payment_date"
                case loanTypeDescription = "loan_type_description"
                case loanTerm = "loan_term"
                case maturityDate = "maturity_date"
                case nextMonthlyPayment = "next_monthly_payment"
                case nextPaymentDueDate = "next_payment_due_date"
                case originationDate = "origination_date"
                case originationPrincipalAmount = "origination_principal_amount"
                case pastDueAmount = "past_due_amount"
                case propertyAddress = "property_address"
                case ytdInterestPaid = "ytd_interest_paid"
                case ytdPrincipalPaid = "ytd_principal_paid"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case liabilityId = "liability_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/InterestRate`.
        internal struct InterestRate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InterestRate/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/InterestRate/percentage`.
            internal var percentage: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/InterestRate/type`.
            internal var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InterestRate/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/InterestRate/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/InterestRate/mortgage_id`.
            internal var mortgageId: Swift.String
            /// Creates a new `InterestRate`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - percentage:
            ///   - _type:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - mortgageId:
            internal init(
                id: Swift.String,
                percentage: Swift.Double? = nil,
                _type: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                mortgageId: Swift.String
            ) {
                self.id = id
                self.percentage = percentage
                self._type = _type
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.mortgageId = mortgageId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case percentage
                case _type = "type"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case mortgageId = "mortgage_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/PropertyAddress`.
        internal struct PropertyAddress: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PropertyAddress/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PropertyAddress/city`.
            internal var city: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PropertyAddress/country`.
            internal var country: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PropertyAddress/postal_code`.
            internal var postalCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PropertyAddress/region`.
            internal var region: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PropertyAddress/street`.
            internal var street: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PropertyAddress/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/PropertyAddress/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/PropertyAddress/mortgage_id`.
            internal var mortgageId: Swift.String
            /// Creates a new `PropertyAddress`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - city:
            ///   - country:
            ///   - postalCode:
            ///   - region:
            ///   - street:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - mortgageId:
            internal init(
                id: Swift.String,
                city: Swift.String? = nil,
                country: Swift.String? = nil,
                postalCode: Swift.String? = nil,
                region: Swift.String? = nil,
                street: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                mortgageId: Swift.String
            ) {
                self.id = id
                self.city = city
                self.country = country
                self.postalCode = postalCode
                self.region = region
                self.street = street
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.mortgageId = mortgageId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case city
                case country
                case postalCode = "postal_code"
                case region
                case street
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case mortgageId = "mortgage_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Student`.
        internal struct Student: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Student/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Student/account_id`.
            internal var accountId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/account_number`.
            internal var accountNumber: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/disbursement_dates`.
            internal var disbursementDates: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Student/expected_payoff_date`.
            internal var expectedPayoffDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/guarantor`.
            internal var guarantor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/interest_rate_percentage`.
            internal var interestRatePercentage: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Student/is_overdue`.
            internal var isOverdue: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Student/last_payment_amount`.
            internal var lastPaymentAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Student/last_payment_date`.
            internal var lastPaymentDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/last_statement_balance`.
            internal var lastStatementBalance: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Student/last_statement_issue_date`.
            internal var lastStatementIssueDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/loan_name`.
            internal var loanName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/loan_status`.
            internal var loanStatus: Components.Schemas.LoanStatus
            /// - Remark: Generated from `#/components/schemas/Student/minimum_payment_amount`.
            internal var minimumPaymentAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Student/next_payment_due_date`.
            internal var nextPaymentDueDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/origination_date`.
            internal var originationDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/origination_principal_amount`.
            internal var originationPrincipalAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Student/outstanding_interest_amount`.
            internal var outstandingInterestAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Student/payment_reference_number`.
            internal var paymentReferenceNumber: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/repayment_plan`.
            internal var repaymentPlan: Components.Schemas.RepaymentPlan
            /// - Remark: Generated from `#/components/schemas/Student/sequence_number`.
            internal var sequenceNumber: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Student/servicer_address`.
            internal var servicerAddress: Components.Schemas.ServicerAddress
            /// - Remark: Generated from `#/components/schemas/Student/ytd_interest_paid`.
            internal var ytdInterestPaid: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Student/ytd_principal_paid`.
            internal var ytdPrincipalPaid: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Student/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Student/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Student/liability_id`.
            internal var liabilityId: Swift.String
            /// Creates a new `Student`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - accountId:
            ///   - accountNumber:
            ///   - disbursementDates:
            ///   - expectedPayoffDate:
            ///   - guarantor:
            ///   - interestRatePercentage:
            ///   - isOverdue:
            ///   - lastPaymentAmount:
            ///   - lastPaymentDate:
            ///   - lastStatementBalance:
            ///   - lastStatementIssueDate:
            ///   - loanName:
            ///   - loanStatus:
            ///   - minimumPaymentAmount:
            ///   - nextPaymentDueDate:
            ///   - originationDate:
            ///   - originationPrincipalAmount:
            ///   - outstandingInterestAmount:
            ///   - paymentReferenceNumber:
            ///   - repaymentPlan:
            ///   - sequenceNumber:
            ///   - servicerAddress:
            ///   - ytdInterestPaid:
            ///   - ytdPrincipalPaid:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - liabilityId:
            internal init(
                id: Swift.String,
                accountId: Swift.String? = nil,
                accountNumber: Swift.String? = nil,
                disbursementDates: [Swift.String]? = nil,
                expectedPayoffDate: Swift.String? = nil,
                guarantor: Swift.String? = nil,
                interestRatePercentage: Swift.Double,
                isOverdue: Swift.Bool? = nil,
                lastPaymentAmount: Swift.Double? = nil,
                lastPaymentDate: Swift.String? = nil,
                lastStatementBalance: Swift.Double? = nil,
                lastStatementIssueDate: Swift.String? = nil,
                loanName: Swift.String? = nil,
                loanStatus: Components.Schemas.LoanStatus,
                minimumPaymentAmount: Swift.Double? = nil,
                nextPaymentDueDate: Swift.String? = nil,
                originationDate: Swift.String? = nil,
                originationPrincipalAmount: Swift.Double? = nil,
                outstandingInterestAmount: Swift.Double? = nil,
                paymentReferenceNumber: Swift.String? = nil,
                repaymentPlan: Components.Schemas.RepaymentPlan,
                sequenceNumber: Swift.String? = nil,
                servicerAddress: Components.Schemas.ServicerAddress,
                ytdInterestPaid: Swift.Double? = nil,
                ytdPrincipalPaid: Swift.Double? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                liabilityId: Swift.String
            ) {
                self.id = id
                self.accountId = accountId
                self.accountNumber = accountNumber
                self.disbursementDates = disbursementDates
                self.expectedPayoffDate = expectedPayoffDate
                self.guarantor = guarantor
                self.interestRatePercentage = interestRatePercentage
                self.isOverdue = isOverdue
                self.lastPaymentAmount = lastPaymentAmount
                self.lastPaymentDate = lastPaymentDate
                self.lastStatementBalance = lastStatementBalance
                self.lastStatementIssueDate = lastStatementIssueDate
                self.loanName = loanName
                self.loanStatus = loanStatus
                self.minimumPaymentAmount = minimumPaymentAmount
                self.nextPaymentDueDate = nextPaymentDueDate
                self.originationDate = originationDate
                self.originationPrincipalAmount = originationPrincipalAmount
                self.outstandingInterestAmount = outstandingInterestAmount
                self.paymentReferenceNumber = paymentReferenceNumber
                self.repaymentPlan = repaymentPlan
                self.sequenceNumber = sequenceNumber
                self.servicerAddress = servicerAddress
                self.ytdInterestPaid = ytdInterestPaid
                self.ytdPrincipalPaid = ytdPrincipalPaid
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.liabilityId = liabilityId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case accountId = "account_id"
                case accountNumber = "account_number"
                case disbursementDates = "disbursement_dates"
                case expectedPayoffDate = "expected_payoff_date"
                case guarantor
                case interestRatePercentage = "interest_rate_percentage"
                case isOverdue = "is_overdue"
                case lastPaymentAmount = "last_payment_amount"
                case lastPaymentDate = "last_payment_date"
                case lastStatementBalance = "last_statement_balance"
                case lastStatementIssueDate = "last_statement_issue_date"
                case loanName = "loan_name"
                case loanStatus = "loan_status"
                case minimumPaymentAmount = "minimum_payment_amount"
                case nextPaymentDueDate = "next_payment_due_date"
                case originationDate = "origination_date"
                case originationPrincipalAmount = "origination_principal_amount"
                case outstandingInterestAmount = "outstanding_interest_amount"
                case paymentReferenceNumber = "payment_reference_number"
                case repaymentPlan = "repayment_plan"
                case sequenceNumber = "sequence_number"
                case servicerAddress = "servicer_address"
                case ytdInterestPaid = "ytd_interest_paid"
                case ytdPrincipalPaid = "ytd_principal_paid"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case liabilityId = "liability_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/LoanStatus`.
        internal struct LoanStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LoanStatus/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/LoanStatus/end_date`.
            internal var endDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LoanStatus/type`.
            internal enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cancelled = "cancelled"
                case chargedOff = "charged off"
                case claim = "claim"
                case consolidated = "consolidated"
                case deferment = "deferment"
                case delinquent = "delinquent"
                case discharged = "discharged"
                case _extension = "extension"
                case forbearance = "forbearance"
                case inGrace = "in grace"
                case inMilitary = "in military"
                case inSchool = "in school"
                case notFullyDisbursed = "not fully disbursed"
                case other = "other"
                case paidInFull = "paid in full"
                case refunded = "refunded"
                case repayment = "repayment"
                case transferred = "transferred"
                case pendingIdr = "pending idr"
            }
            /// - Remark: Generated from `#/components/schemas/LoanStatus/type`.
            internal var _type: Components.Schemas.LoanStatus._TypePayload?
            /// - Remark: Generated from `#/components/schemas/LoanStatus/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/LoanStatus/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/LoanStatus/student_id`.
            internal var studentId: Swift.String
            /// Creates a new `LoanStatus`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - endDate:
            ///   - _type:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - studentId:
            internal init(
                id: Swift.String,
                endDate: Swift.String? = nil,
                _type: Components.Schemas.LoanStatus._TypePayload? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                studentId: Swift.String
            ) {
                self.id = id
                self.endDate = endDate
                self._type = _type
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.studentId = studentId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case endDate = "end_date"
                case _type = "type"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case studentId = "student_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/RepaymentPlan`.
        internal struct RepaymentPlan: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RepaymentPlan/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/RepaymentPlan/description`.
            internal var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RepaymentPlan/type`.
            internal enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case extendedGraduated = "extended graduated"
                case extendedStandard = "extended standard"
                case graduated = "graduated"
                case incomeContingentRepayment = "income-contingent repayment"
                case incomeBasedRepayment = "income-based repayment"
                case incomeSensitiveRepayment = "income-sensitive repayment"
                case interestOnly = "interest-only"
                case other = "other"
                case payAsYouEarn = "pay as you earn"
                case revisedPayAsYouEarn = "revised pay as you earn"
                case standard = "standard"
                case savingOnAValuableEducation = "saving on a valuable education"
                case null = "null"
            }
            /// - Remark: Generated from `#/components/schemas/RepaymentPlan/type`.
            internal var _type: Components.Schemas.RepaymentPlan._TypePayload?
            /// - Remark: Generated from `#/components/schemas/RepaymentPlan/created_at`.
            internal var createdAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/RepaymentPlan/updated_at`.
            internal var updatedAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/RepaymentPlan/student_id`.
            internal var studentId: Swift.String
            /// Creates a new `RepaymentPlan`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - description:
            ///   - _type:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - studentId:
            internal init(
                id: Swift.String,
                description: Swift.String? = nil,
                _type: Components.Schemas.RepaymentPlan._TypePayload? = nil,
                createdAt: Swift.String,
                updatedAt: Swift.String,
                studentId: Swift.String
            ) {
                self.id = id
                self.description = description
                self._type = _type
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.studentId = studentId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case description
                case _type = "type"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case studentId = "student_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ServicerAddress`.
        internal struct ServicerAddress: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ServicerAddress/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ServicerAddress/city`.
            internal var city: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ServicerAddress/region`.
            internal var region: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ServicerAddress/street`.
            internal var street: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ServicerAddress/postal_code`.
            internal var postalCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ServicerAddress/country`.
            internal var country: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ServicerAddress/created_at`.
            internal var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/ServicerAddress/updated_at`.
            internal var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/ServicerAddress/student_id`.
            internal var studentId: Swift.String
            /// Creates a new `ServicerAddress`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - city:
            ///   - region:
            ///   - street:
            ///   - postalCode:
            ///   - country:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - studentId:
            internal init(
                id: Swift.String,
                city: Swift.String? = nil,
                region: Swift.String? = nil,
                street: Swift.String? = nil,
                postalCode: Swift.String? = nil,
                country: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                studentId: Swift.String
            ) {
                self.id = id
                self.city = city
                self.region = region
                self.street = street
                self.postalCode = postalCode
                self.country = country
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.studentId = studentId
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case city
                case region
                case street
                case postalCode = "postal_code"
                case country
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case studentId = "student_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/inline_response_200`.
        internal struct InlineResponse200: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/inline_response_200/cursor`.
            internal var cursor: Swift.String
            /// Creates a new `InlineResponse200`.
            ///
            /// - Parameters:
            ///   - cursor:
            internal init(cursor: Swift.String) {
                self.cursor = cursor
            }
            internal enum CodingKeys: String, CodingKey {
                case cursor
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {
        internal struct PlaidLinkToken: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/plaidLinkToken/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/plaidLinkToken/content/application\/json`.
                case json(Components.Schemas.PlaidLinkToken)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PlaidLinkToken {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.PlaidLinkToken.Body
            /// Creates a new `PlaidLinkToken`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.PlaidLinkToken.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// PlaidLinkTokenCreate
    ///
    /// - Remark: HTTP `GET /plaid/link/token/create`.
    /// - Remark: Generated from `#/paths//plaid/link/token/create/get(get-plaid-link-token-create)`.
    internal enum GetPlaidLinkTokenCreate {
        internal static let id: Swift.String = "get-plaid-link-token-create"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plaid/link/token/create/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPlaidLinkTokenCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPlaidLinkTokenCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetPlaidLinkTokenCreate.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.GetPlaidLinkTokenCreate.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plaid/link/token/create/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plaid/link/token/create/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaidLinkToken)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PlaidLinkToken {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetPlaidLinkTokenCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetPlaidLinkTokenCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//plaid/link/token/create/get(get-plaid-link-token-create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetPlaidLinkTokenCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetPlaidLinkTokenCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// PlaidLinkTokenUpdate
    ///
    /// - Remark: HTTP `GET /plaid/link/token/update`.
    /// - Remark: Generated from `#/paths//plaid/link/token/update/get(get-plaid-link-token-update)`.
    internal enum GetPlaidLinkTokenUpdate {
        internal static let id: Swift.String = "get-plaid-link-token-update"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plaid/link/token/update/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPlaidLinkTokenUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPlaidLinkTokenUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetPlaidLinkTokenUpdate.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.GetPlaidLinkTokenUpdate.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plaid/link/token/update/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plaid/link/token/update/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaidLinkToken)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PlaidLinkToken {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetPlaidLinkTokenUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetPlaidLinkTokenUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//plaid/link/token/update/get(get-plaid-link-token-update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetPlaidLinkTokenUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetPlaidLinkTokenUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//plaid/link/token/update/get(get-plaid-link-token-update)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetPlaidLinkTokenUpdate.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//plaid/link/token/update/get(get-plaid-link-token-update)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.GetPlaidLinkTokenUpdate.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// AccountsGet
    ///
    /// Get accounts from server
    ///
    /// - Remark: HTTP `GET /accounts`.
    /// - Remark: Generated from `#/paths//accounts/get(get-accounts)`.
    internal enum GetAccounts {
        internal static let id: Swift.String = "get-accounts"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/accounts/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accounts/GET/query/account_id`.
                internal var accountId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - accountId:
                internal init(accountId: Swift.String? = nil) {
                    self.accountId = accountId
                }
            }
            internal var query: Operations.GetAccounts.Input.Query
            /// - Remark: Generated from `#/paths/accounts/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAccounts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAccounts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetAccounts.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetAccounts.Input.Query = .init(),
                headers: Operations.GetAccounts.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accounts/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/accounts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Account])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.Account] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetAccounts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetAccounts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Shared Response
            ///
            /// - Remark: Generated from `#/paths//accounts/get(get-accounts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAccounts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetAccounts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//accounts/get(get-accounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetAccounts.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//accounts/get(get-accounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.GetAccounts.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// AccountsPost
    ///
    /// Post new account to server
    ///
    /// - Remark: HTTP `POST /accounts`.
    /// - Remark: Generated from `#/paths//accounts/post(post-accounts)`.
    internal enum PostAccounts {
        internal static let id: Swift.String = "post-accounts"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/accounts/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accounts/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm([Components.Schemas.Account])
            }
            internal var body: Operations.PostAccounts.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - body:
            internal init(body: Operations.PostAccounts.Input.Body? = nil) {
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Accepted: Sendable, Hashable {
                /// Creates a new `Accepted`.
                internal init() {}
            }
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//accounts/post(post-accounts)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.PostAccounts.Output.Accepted)
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//accounts/post(post-accounts)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            internal static var accepted: Self {
                .accepted(.init())
            }
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            internal var accepted: Operations.PostAccounts.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//accounts/post(post-accounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PostAccounts.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//accounts/post(post-accounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.PostAccounts.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// AccountsPut
    ///
    /// Update existing account on server
    ///
    /// - Remark: HTTP `PUT /accounts`.
    /// - Remark: Generated from `#/paths//accounts/put(put-accounts)`.
    internal enum PutAccounts {
        internal static let id: Swift.String = "put-accounts"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/accounts/PUT/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accounts/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.Account)
            }
            internal var body: Operations.PutAccounts.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - body:
            internal init(body: Operations.PutAccounts.Input.Body? = nil) {
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Accepted: Sendable, Hashable {
                /// Creates a new `Accepted`.
                internal init() {}
            }
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//accounts/put(put-accounts)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.PutAccounts.Output.Accepted)
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//accounts/put(put-accounts)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            internal static var accepted: Self {
                .accepted(.init())
            }
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            internal var accepted: Operations.PutAccounts.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//accounts/put(put-accounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PutAccounts.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//accounts/put(put-accounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.PutAccounts.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// AccountsDelete
    ///
    /// Delete account from server
    ///
    /// - Remark: HTTP `DELETE /accounts`.
    /// - Remark: Generated from `#/paths//accounts/delete(delete-accounts)`.
    internal enum DeleteAccounts {
        internal static let id: Swift.String = "delete-accounts"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/accounts/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accounts/DELETE/query/account_id`.
                internal var accountId: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - accountId:
                internal init(accountId: Swift.String) {
                    self.accountId = accountId
                }
            }
            internal var query: Operations.DeleteAccounts.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            internal init(query: Operations.DeleteAccounts.Input.Query) {
                self.query = query
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//accounts/delete(delete-accounts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteAccounts.Output.Ok)
            /// OK
            ///
            /// - Remark: Generated from `#/paths//accounts/delete(delete-accounts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.DeleteAccounts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//accounts/delete(delete-accounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DeleteAccounts.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//accounts/delete(delete-accounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.DeleteAccounts.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// TransactionsGet
    ///
    /// - Remark: HTTP `GET /transactions`.
    /// - Remark: Generated from `#/paths//transactions/get(get-transactions)`.
    internal enum GetTransactions {
        internal static let id: Swift.String = "get-transactions"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/transactions/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/GET/query/account_id`.
                internal var accountId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - accountId:
                internal init(accountId: Swift.String? = nil) {
                    self.accountId = accountId
                }
            }
            internal var query: Operations.GetTransactions.Input.Query
            /// - Remark: Generated from `#/paths/transactions/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTransactions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTransactions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetTransactions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetTransactions.Input.Query = .init(),
                headers: Operations.GetTransactions.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/transactions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Transaction])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.Transaction] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetTransactions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetTransactions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//transactions/get(get-transactions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetTransactions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetTransactions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//transactions/get(get-transactions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetTransactions.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//transactions/get(get-transactions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.GetTransactions.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// TransactionsPost
    ///
    /// - Remark: HTTP `POST /transactions`.
    /// - Remark: Generated from `#/paths//transactions/post(post-transactions)`.
    internal enum PostTransactions {
        internal static let id: Swift.String = "post-transactions"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/transactions/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/POST/requestBody/content/application\/json`.
                case json([Components.Schemas.Transaction])
            }
            internal var body: Operations.PostTransactions.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - body:
            internal init(body: Operations.PostTransactions.Input.Body? = nil) {
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Accepted: Sendable, Hashable {
                /// Creates a new `Accepted`.
                internal init() {}
            }
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//transactions/post(post-transactions)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.PostTransactions.Output.Accepted)
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//transactions/post(post-transactions)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            internal static var accepted: Self {
                .accepted(.init())
            }
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            internal var accepted: Operations.PostTransactions.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//transactions/post(post-transactions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PostTransactions.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//transactions/post(post-transactions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.PostTransactions.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// TransactionsPut
    ///
    /// - Remark: HTTP `PUT /transactions`.
    /// - Remark: Generated from `#/paths//transactions/put(put-transactions)`.
    internal enum PutTransactions {
        internal static let id: Swift.String = "put-transactions"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/transactions/PUT/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/PUT/query/transaction_id`.
                internal var transactionId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - transactionId:
                internal init(transactionId: Swift.String? = nil) {
                    self.transactionId = transactionId
                }
            }
            internal var query: Operations.PutTransactions.Input.Query
            /// - Remark: Generated from `#/paths/transactions/PUT/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.Transaction)
            }
            internal var body: Operations.PutTransactions.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - body:
            internal init(
                query: Operations.PutTransactions.Input.Query = .init(),
                body: Operations.PutTransactions.Input.Body? = nil
            ) {
                self.query = query
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Accepted: Sendable, Hashable {
                /// Creates a new `Accepted`.
                internal init() {}
            }
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//transactions/put(put-transactions)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.PutTransactions.Output.Accepted)
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//transactions/put(put-transactions)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            internal static var accepted: Self {
                .accepted(.init())
            }
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            internal var accepted: Operations.PutTransactions.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//transactions/put(put-transactions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PutTransactions.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//transactions/put(put-transactions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.PutTransactions.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// TransactionsDelete
    ///
    /// - Remark: HTTP `DELETE /transactions`.
    /// - Remark: Generated from `#/paths//transactions/delete(delete-transactions)`.
    internal enum DeleteTransactions {
        internal static let id: Swift.String = "delete-transactions"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/transactions/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/DELETE/query/transaction_id`.
                internal var transactionId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - transactionId:
                internal init(transactionId: Swift.String? = nil) {
                    self.transactionId = transactionId
                }
            }
            internal var query: Operations.DeleteTransactions.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            internal init(query: Operations.DeleteTransactions.Input.Query = .init()) {
                self.query = query
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Accepted: Sendable, Hashable {
                /// Creates a new `Accepted`.
                internal init() {}
            }
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//transactions/delete(delete-transactions)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.DeleteTransactions.Output.Accepted)
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//transactions/delete(delete-transactions)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            internal static var accepted: Self {
                .accepted(.init())
            }
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            internal var accepted: Operations.DeleteTransactions.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//transactions/delete(delete-transactions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DeleteTransactions.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//transactions/delete(delete-transactions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.DeleteTransactions.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// TransactionsSync
    ///
    /// - Remark: HTTP `GET /transactions/sync`.
    /// - Remark: Generated from `#/paths//transactions/sync/get(get-transactions-sync)`.
    internal enum GetTransactionsSync {
        internal static let id: Swift.String = "get-transactions-sync"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/transactions/sync/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/sync/GET/query/cursor`.
                internal var cursor: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cursor:
                internal init(cursor: Swift.String? = nil) {
                    self.cursor = cursor
                }
            }
            internal var query: Operations.GetTransactionsSync.Input.Query
            /// - Remark: Generated from `#/paths/transactions/sync/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTransactionsSync.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTransactionsSync.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetTransactionsSync.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetTransactionsSync.Input.Query = .init(),
                headers: Operations.GetTransactionsSync.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/sync/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/transactions/sync/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.InlineResponse200)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.InlineResponse200 {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetTransactionsSync.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetTransactionsSync.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//transactions/sync/get(get-transactions-sync)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetTransactionsSync.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetTransactionsSync.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// No Content
            ///
            /// - Remark: Generated from `#/paths//transactions/sync/get(get-transactions-sync)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.GetTransactionsSync.Output.NoContent)
            /// No Content
            ///
            /// - Remark: Generated from `#/paths//transactions/sync/get(get-transactions-sync)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.GetTransactionsSync.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//transactions/sync/get(get-transactions-sync)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetTransactionsSync.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//transactions/sync/get(get-transactions-sync)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.GetTransactionsSync.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// LiabilitiesGet
    ///
    /// - Remark: HTTP `GET /liabilities`.
    /// - Remark: Generated from `#/paths//liabilities/get(get-liabilities)`.
    internal enum GetLiabilities {
        internal static let id: Swift.String = "get-liabilities"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/liabilities/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/liabilities/GET/query/account_id`.
                internal var accountId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - accountId:
                internal init(accountId: Swift.String? = nil) {
                    self.accountId = accountId
                }
            }
            internal var query: Operations.GetLiabilities.Input.Query
            /// - Remark: Generated from `#/paths/liabilities/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetLiabilities.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetLiabilities.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetLiabilities.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetLiabilities.Input.Query = .init(),
                headers: Operations.GetLiabilities.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/liabilities/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/liabilities/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Liability])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.Liability] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetLiabilities.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GetLiabilities.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//liabilities/get(get-liabilities)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetLiabilities.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetLiabilities.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//liabilities/get(get-liabilities)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetLiabilities.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//liabilities/get(get-liabilities)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.GetLiabilities.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
